// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "auth";

export interface PaginationDto {
  page?: number | undefined;
  skip?: number | undefined;
}

export interface UpdateUserDto {
  id?: number | undefined;
  socialMedia?: SocialMedia | undefined;
}

export interface FindOneUserDto {
  id?: number | undefined;
}

export interface Empty {
}

export interface Users {
  users?: User[] | undefined;
}

export interface CreateUserDto {
  name?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
}

export interface User {
  id?: number | undefined;
  name?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  socialMedia?: SocialMedia | undefined;
}

export interface SocialMedia {
  twitterUri?: string | undefined;
  fbUri?: string | undefined;
}

function createBasePaginationDto(): PaginationDto {
  return { page: 0, skip: 0 };
}

export const PaginationDto: MessageFns<PaginationDto> = {
  encode(message: PaginationDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== undefined && message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.skip !== undefined && message.skip !== 0) {
      writer.uint32(16).int32(message.skip);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaginationDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaginationDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.skip = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaginationDto {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      skip: isSet(object.skip) ? globalThis.Number(object.skip) : 0,
    };
  },

  toJSON(message: PaginationDto): unknown {
    const obj: any = {};
    if (message.page !== undefined && message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.skip !== undefined && message.skip !== 0) {
      obj.skip = Math.round(message.skip);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaginationDto>, I>>(base?: I): PaginationDto {
    return PaginationDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaginationDto>, I>>(object: I): PaginationDto {
    const message = createBasePaginationDto();
    message.page = object.page ?? 0;
    message.skip = object.skip ?? 0;
    return message;
  },
};

function createBaseUpdateUserDto(): UpdateUserDto {
  return { id: 0, socialMedia: undefined };
}

export const UpdateUserDto: MessageFns<UpdateUserDto> = {
  encode(message: UpdateUserDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.socialMedia !== undefined) {
      SocialMedia.encode(message.socialMedia, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.socialMedia = SocialMedia.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserDto {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      socialMedia: isSet(object.socialMedia) ? SocialMedia.fromJSON(object.socialMedia) : undefined,
    };
  },

  toJSON(message: UpdateUserDto): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.socialMedia !== undefined) {
      obj.socialMedia = SocialMedia.toJSON(message.socialMedia);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserDto>, I>>(base?: I): UpdateUserDto {
    return UpdateUserDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserDto>, I>>(object: I): UpdateUserDto {
    const message = createBaseUpdateUserDto();
    message.id = object.id ?? 0;
    message.socialMedia = (object.socialMedia !== undefined && object.socialMedia !== null)
      ? SocialMedia.fromPartial(object.socialMedia)
      : undefined;
    return message;
  },
};

function createBaseFindOneUserDto(): FindOneUserDto {
  return { id: 0 };
}

export const FindOneUserDto: MessageFns<FindOneUserDto> = {
  encode(message: FindOneUserDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindOneUserDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindOneUserDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindOneUserDto {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: FindOneUserDto): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindOneUserDto>, I>>(base?: I): FindOneUserDto {
    return FindOneUserDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindOneUserDto>, I>>(object: I): FindOneUserDto {
    const message = createBaseFindOneUserDto();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseUsers(): Users {
  return { users: [] };
}

export const Users: MessageFns<Users> = {
  encode(message: Users, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.users !== undefined && message.users.length !== 0) {
      for (const v of message.users) {
        User.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Users {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsers();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.users!.push(User.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Users {
    return { users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => User.fromJSON(e)) : [] };
  },

  toJSON(message: Users): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => User.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Users>, I>>(base?: I): Users {
    return Users.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Users>, I>>(object: I): Users {
    const message = createBaseUsers();
    message.users = object.users?.map((e) => User.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateUserDto(): CreateUserDto {
  return { name: "", email: "", password: "" };
}

export const CreateUserDto: MessageFns<CreateUserDto> = {
  encode(message: CreateUserDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.email !== undefined && message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.password !== undefined && message.password !== "") {
      writer.uint32(26).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.password = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserDto {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: CreateUserDto): unknown {
    const obj: any = {};
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== undefined && message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== undefined && message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateUserDto>, I>>(base?: I): CreateUserDto {
    return CreateUserDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateUserDto>, I>>(object: I): CreateUserDto {
    const message = createBaseCreateUserDto();
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseUser(): User {
  return { id: 0, name: "", email: "", password: "", socialMedia: undefined };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== undefined && message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.password !== undefined && message.password !== "") {
      writer.uint32(34).string(message.password);
    }
    if (message.socialMedia !== undefined) {
      SocialMedia.encode(message.socialMedia, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.password = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.socialMedia = SocialMedia.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      socialMedia: isSet(object.socialMedia) ? SocialMedia.fromJSON(object.socialMedia) : undefined,
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== undefined && message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== undefined && message.password !== "") {
      obj.password = message.password;
    }
    if (message.socialMedia !== undefined) {
      obj.socialMedia = SocialMedia.toJSON(message.socialMedia);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.socialMedia = (object.socialMedia !== undefined && object.socialMedia !== null)
      ? SocialMedia.fromPartial(object.socialMedia)
      : undefined;
    return message;
  },
};

function createBaseSocialMedia(): SocialMedia {
  return { twitterUri: undefined, fbUri: undefined };
}

export const SocialMedia: MessageFns<SocialMedia> = {
  encode(message: SocialMedia, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.twitterUri !== undefined) {
      writer.uint32(10).string(message.twitterUri);
    }
    if (message.fbUri !== undefined) {
      writer.uint32(18).string(message.fbUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SocialMedia {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSocialMedia();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.twitterUri = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fbUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SocialMedia {
    return {
      twitterUri: isSet(object.twitterUri) ? globalThis.String(object.twitterUri) : undefined,
      fbUri: isSet(object.fbUri) ? globalThis.String(object.fbUri) : undefined,
    };
  },

  toJSON(message: SocialMedia): unknown {
    const obj: any = {};
    if (message.twitterUri !== undefined) {
      obj.twitterUri = message.twitterUri;
    }
    if (message.fbUri !== undefined) {
      obj.fbUri = message.fbUri;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SocialMedia>, I>>(base?: I): SocialMedia {
    return SocialMedia.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SocialMedia>, I>>(object: I): SocialMedia {
    const message = createBaseSocialMedia();
    message.twitterUri = object.twitterUri ?? undefined;
    message.fbUri = object.fbUri ?? undefined;
    return message;
  },
};

export type UsersServiceDefinition = typeof UsersServiceDefinition;
export const UsersServiceDefinition = {
  name: "UsersService",
  fullName: "auth.UsersService",
  methods: {
    createUser: {
      name: "CreateUser",
      requestType: CreateUserDto,
      requestStream: false,
      responseType: User,
      responseStream: false,
      options: {},
    },
    findAllUsers: {
      name: "FindAllUsers",
      requestType: Empty,
      requestStream: false,
      responseType: Users,
      responseStream: false,
      options: {},
    },
    findOneUser: {
      name: "FindOneUser",
      requestType: FindOneUserDto,
      requestStream: false,
      responseType: User,
      responseStream: false,
      options: {},
    },
    updateUser: {
      name: "UpdateUser",
      requestType: UpdateUserDto,
      requestStream: false,
      responseType: User,
      responseStream: false,
      options: {},
    },
    removeUser: {
      name: "RemoveUser",
      requestType: FindOneUserDto,
      requestStream: false,
      responseType: User,
      responseStream: false,
      options: {},
    },
    queryUsers: {
      name: "QueryUsers",
      requestType: PaginationDto,
      requestStream: true,
      responseType: Users,
      responseStream: true,
      options: {},
    },
  },
} as const;

export interface UsersServiceImplementation<CallContextExt = {}> {
  createUser(request: CreateUserDto, context: CallContext & CallContextExt): Promise<DeepPartial<User>>;
  findAllUsers(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<Users>>;
  findOneUser(request: FindOneUserDto, context: CallContext & CallContextExt): Promise<DeepPartial<User>>;
  updateUser(request: UpdateUserDto, context: CallContext & CallContextExt): Promise<DeepPartial<User>>;
  removeUser(request: FindOneUserDto, context: CallContext & CallContextExt): Promise<DeepPartial<User>>;
  queryUsers(
    request: AsyncIterable<PaginationDto>,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<Users>>;
}

export interface UsersServiceClient<CallOptionsExt = {}> {
  createUser(request: DeepPartial<CreateUserDto>, options?: CallOptions & CallOptionsExt): Promise<User>;
  findAllUsers(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<Users>;
  findOneUser(request: DeepPartial<FindOneUserDto>, options?: CallOptions & CallOptionsExt): Promise<User>;
  updateUser(request: DeepPartial<UpdateUserDto>, options?: CallOptions & CallOptionsExt): Promise<User>;
  removeUser(request: DeepPartial<FindOneUserDto>, options?: CallOptions & CallOptionsExt): Promise<User>;
  queryUsers(
    request: AsyncIterable<DeepPartial<PaginationDto>>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<Users>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
